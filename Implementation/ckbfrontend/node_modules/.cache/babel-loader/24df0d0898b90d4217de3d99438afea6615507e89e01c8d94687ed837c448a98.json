{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AleFerro\\\\Desktop\\\\FeraboliFilippiniLucca\\\\Implementation\\\\ckbfrontend\\\\src\\\\Components\\\\Prova\\\\prova.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ClothesList() {\n  _s();\n  const [clothes, setClothes] = useState([]);\n  useEffect(() => {\n    // Replace this with your real-time data fetching logic\n    // For example, using WebSocket or other methods to listen for new clothes items\n    const backendService = {\n      onNewClothesItemReceived: newItem => {\n        setClothes(prevClothes => [...prevClothes, newItem]);\n      }\n    };\n\n    // Simulating receiving new clothes items from backend\n    setTimeout(() => {\n      backendService.onNewClothesItemReceived({\n        id: 1,\n        name: \"T-Shirt\",\n        color: \"Blue\"\n      });\n    }, 3000);\n    setTimeout(() => {\n      backendService.onNewClothesItemReceived({\n        id: 2,\n        name: \"Jeans\",\n        color: \"Black\"\n      });\n    }, 6000);\n\n    // Cleanup if needed\n    return () => {\n      // Clean up listeners or subscriptions here\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Clothes List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), clothes.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clothes-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: item.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this), \" - \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: item.color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 52\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n_s(ClothesList, \"1IwJMMYZFxPCOhPygjXB4LJty3o=\");\n_c = ClothesList;\nexport default ClothesList;\nvar _c;\n$RefreshReg$(_c, \"ClothesList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ClothesList","_s","clothes","setClothes","backendService","onNewClothesItemReceived","newItem","prevClothes","setTimeout","id","name","color","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","className","_c","$RefreshReg$"],"sources":["C:/Users/AleFerro/Desktop/FeraboliFilippiniLucca/Implementation/ckbfrontend/src/Components/Prova/prova.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction ClothesList() {\r\n    const [clothes, setClothes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Replace this with your real-time data fetching logic\r\n        // For example, using WebSocket or other methods to listen for new clothes items\r\n        const backendService = {\r\n            onNewClothesItemReceived: (newItem) => {\r\n                setClothes(prevClothes => [...prevClothes, newItem]);\r\n            }\r\n        };\r\n\r\n        // Simulating receiving new clothes items from backend\r\n        setTimeout(() => {\r\n            backendService.onNewClothesItemReceived({ id: 1, name: \"T-Shirt\", color: \"Blue\" });\r\n        }, 3000);\r\n\r\n        setTimeout(() => {\r\n            backendService.onNewClothesItemReceived({ id: 2, name: \"Jeans\", color: \"Black\" });\r\n        }, 6000);\r\n\r\n        // Cleanup if needed\r\n        return () => {\r\n            // Clean up listeners or subscriptions here\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Clothes List</h2>\r\n            {clothes.map(item => (\r\n                <div key={item.id} className=\"clothes-item\">\r\n                    <strong>{item.name}</strong> - <span>{item.color}</span>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClothesList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACZ;IACA;IACA,MAAMO,cAAc,GAAG;MACnBC,wBAAwB,EAAGC,OAAO,IAAK;QACnCH,UAAU,CAACI,WAAW,IAAI,CAAC,GAAGA,WAAW,EAAED,OAAO,CAAC,CAAC;MACxD;IACJ,CAAC;;IAED;IACAE,UAAU,CAAC,MAAM;MACbJ,cAAc,CAACC,wBAAwB,CAAC;QAAEI,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE;MAAO,CAAC,CAAC;IACtF,CAAC,EAAE,IAAI,CAAC;IAERH,UAAU,CAAC,MAAM;MACbJ,cAAc,CAACC,wBAAwB,CAAC;QAAEI,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAQ,CAAC,CAAC;IACrF,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAM;MACT;IAAA,CACH;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIZ,OAAA;IAAAa,QAAA,gBACIb,OAAA;MAAAa,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBd,OAAO,CAACe,GAAG,CAACC,IAAI,iBACbnB,OAAA;MAAmBoB,SAAS,EAAC,cAAc;MAAAP,QAAA,gBACvCb,OAAA;QAAAa,QAAA,EAASM,IAAI,CAACR;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,OAAG,eAAAjB,OAAA;QAAAa,QAAA,EAAOM,IAAI,CAACP;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA,GADlDE,IAAI,CAACT,EAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEZ,CACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACf,EAAA,CArCQD,WAAW;AAAAoB,EAAA,GAAXpB,WAAW;AAuCpB,eAAeA,WAAW;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}