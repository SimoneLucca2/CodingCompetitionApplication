version: "3.7"

services:

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/authentication
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: pw
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8761/eureka

      SPRING_JPA_HIBERNATE_DDL-AUTO: update
      SPRING_JPA_DATABASE: MYSQL
      SPRING_CLOUD_GATEWAY_MVC_ROUTES_0_ID: battle-service
      SPRING_CLOUD_GATEWAY_MVC_ROUTES_0_URI: lb://battle-service
      SPRING_CLOUD_GATEWAY_MVC_ROUTES_0_PREDICATES_0: Path=/battle/**
      SPRING_CLOUD_GATEWAY_MVC_ROUTES_1_ID: user-service
      SPRING_CLOUD_GATEWAY_MVC_ROUTES_1_URI: lb://user-service
      SPRING_CLOUD_GATEWAY_MVC_ROUTES_1_PREDICATES_0: Path=/user/**
      SPRING_CLOUD_GATEWAY_MVC_ROUTES_2_ID: tournament-service
      SPRING_CLOUD_GATEWAY_MVC_ROUTES_2_URI: lb://tournament-service
      SPRING_CLOUD_GATEWAY_MVC_ROUTES_2_PREDICATES_0: Path=/tournament/**
      SPRING_APPLICATION_NAME: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - kafka
      - eureka-server


  tournament-service:
    build:
      context: ./tournament-service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/tournament_schema
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: pw
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - mysql
      - kafka
      - eureka-server


  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/user_schema
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: pw
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8761/eureka

      SPRING_MAIL_HOST: smtps.aruba.it
      SPRING_MAIL_PORT: 465
      SPRING_MAIL_USERNAME: nodered@neslab.it
      SPRING_MAIL_PASSWORD: Node22$$
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: true
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
    depends_on:
      - mysql
      - kafka

  battle-service:
    build:
      context: ./battle-service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/battle_schema
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: pw
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8761/eureka
      GITHUB_API_TOKEN: <Your GitHub token>
    depends_on:
      - mysql
      - kafka
      - eureka-server


  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"


  tournament-time-server:
    build:
      context: ./tournament-time-server
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/tournament_schema
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: pw
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      TOURNAMENT_POLLING_RATE: 5000
    depends_on:
      - mysql

  battle-time-server:
    build:
      context: ./battle-time-server
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/battle_schema
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: pw
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      TOURNAMENT_POLLING_RATE: 5000
    depends_on:
      - mysql

  client:
    build:
      context: ./ckbfrontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: pw
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: lucca
      MYSQL_PASSWORD: pw
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:3.2
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9093,EXTERNAL://localhost:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_MESSAGE_MAX_BYTES=1048588
    depends_on:
      - zookeeper
volumes:
  zookeeper_data:
  kafka_data:
  mysql_data:


