
participant "Client" as Client
participant "API Gateway" as APIGateway
participant "Tournament Manager" as TournamentManager
participant "Tournament Closer" as TournamentCloser
participant "Tournament Data Tier" as TournamentDataTier
participant "Message Broker" as MB
participant "Battle Service" as BattleService

Client->APIGateway:PUT \n/v1/tournament/\n{tournamentId}/\nstatus/\nclosing
activate APIGateway

APIGateway->TournamentManager:PUT \n/tournament/\n{tournamentId}/\nstatus/\nclosing
activate TournamentManager

TournamentManager->TournamentCloser:initiateCloseTournament\n({tournamentId})
activate TournamentCloser

TournamentCloser->TournamentDataTier:PUT \n/tournament/\n{tournamentId}/\nstatus/\nclosing
activate TournamentDataTier
TournamentDataTier-->TournamentCloser:200 Ok
deactivate TournamentDataTier

TournamentCloser->MB:Publish \ntournament.lifecycle.closing \nevent
TournamentCloser-->TournamentManager:Ok
deactivate TournamentCloser

TournamentManager-->APIGateway:200 Ok
deactivate TournamentManager

note over MB:Stores the event
APIGateway-->Client:200 Ok
deactivate APIGateway



MB->BattleService:Consume \ntournament.lifecycle.closing \nMessage

note over BattleService:Eventually, \nwhen the last battle ends
BattleService->MB:Publish \ntournament.lifecycle.closed \nevent

note over MB:Stores the event

TournamentCloser<-MB:Consume \ntournament.lifecycle.closed \nmessage

TournamentCloser->TournamentDataTier:setStatus(\n    {tournamentId}, \n    "closed")
activate TournamentDataTier
TournamentDataTier-->TournamentCloser:Ok
deactivate TournamentDataTier

