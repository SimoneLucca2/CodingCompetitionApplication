
participant "Client" as Client
participant "API Gateway" as APIGateway
participant "Tournament Manager" as TournamentManager
participant "Tournament Closer" as TournamentCloser
participant "Tournament Data Tier" as TournamentDataTier
participant "Message Broker" as MB
participant "Battle Service" as BattleService

Client->APIGateway: PUT /v1/tournament/{tournamentId}/status/close
activate APIGateway

APIGateway->TournamentManager:PUT /tournament/{tournamentId}/status/close
activate TournamentManager

TournamentManager->TournamentCloser:initiateCloseTournament({tournamentId})
activate TournamentCloser

TournamentCloser->TournamentDataTier:setStatus({tournamentId}, "closing")
activate TournamentDataTier
TournamentDataTier-->TournamentCloser: Status updated to "closing"
deactivate TournamentDataTier

TournamentCloser->MB:Publish tournament.lifecycle.closing event
TournamentCloser-->TournamentManager:Ok
deactivate TournamentCloser

TournamentManager-->APIGateway:200 Ok
deactivate TournamentManager

APIGateway-->Client:200 Ok
deactivate APIGateway

note over MB:Stores the event


MB->BattleService:Consume tournament.lifecycle.closing Message

note over BattleService:Eventually, \nwhen the last battle ends
BattleService->MB:Publish tournament.lifecycle.closed event

note over MB:Stores the event

TournamentCloser<-MB:Consume tournament.lifecycle.closed event

TournamentCloser->TournamentDataTier:setStatus({tournamentId}, "closed")
activate TournamentDataTier
TournamentDataTier-->TournamentCloser:Ok
deactivate TournamentDataTier

