title Close a Tournament

participant "Client" as Client
participant "API Gateway" as APIGateway
participant "Tournament Manager" as TournamentManager
participant "Tournament Closer" as TournamentCloser
participant "Tournament Data Tier" as TournamentDataTier
participant "Battle Service" as BattleService

Client->APIGateway: PUT /v1/tournament/{tournamentId}/status/close
activate APIGateway

APIGateway->TournamentManager:PUT /tournament/{tournamentId}/status/close
activate TournamentManager

TournamentManager->TournamentCloser:initiateCloseTournament({tournamentId})
activate TournamentCloser

TournamentCloser->TournamentDataTier:setStatus({tournamentId}, "closing")
activate TournamentDataTier
TournamentDataTier-->TournamentCloser: Status updated to "closing"
deactivate TournamentDataTier

TournamentCloser->BattleService: Check if battles are running
activate BattleService
BattleService-->TournamentCloser: Active battles detected
deactivate BattleService

TournamentCloser-->TournamentManager: Tournament is closing
deactivate TournamentCloser

TournamentManager-->APIGateway: Tournament status set to closing
deactivate TournamentManager

APIGateway-->Client:200 Ok
deactivate APIGateway

note over BattleService: Once the last battle ends...
BattleService->APIGateway: PUT /v1/tournament/{tournamentId}/status/complete
activate APIGateway

APIGateway->TournamentManager:PUT /tournament/{tournamentId}/status/complete
activate TournamentManager

TournamentManager->TournamentCloser:completeTournament({tournamentId})
activate TournamentCloser
TournamentCloser->TournamentDataTier:setStatus({tournamentId}, "closed")
activate TournamentDataTier

TournamentDataTier-->TournamentCloser:Tournament closed
deactivate TournamentDataTier

TournamentManager<--TournamentCloser:Tournament closed
deactivate TournamentCloser

TournamentManager-->APIGateway: Tournament closure confirmed
deactivate TournamentManager

APIGateway-->BattleService: Acknowledge tournament closed
deactivate APIGateway
