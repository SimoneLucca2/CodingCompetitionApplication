
participant Client
participant APIGateway
participant TournamentManager
participant TournamentAdministationManager
participant TournamentDataTier
participant UserService

Client->APIGateway: POST /v1/tournament/educator
activate APIGateway
APIGateway->TournamentManager: POST /tournament/educator
activate TournamentManager
TournamentManager->TournamentAdministationManager: addEducator(jsonMsg)
activate TournamentAdministationManager

TournamentAdministationManager->TournamentDataTier: isLeader(requesterID, tournamentId)
activate TournamentDataTier
TournamentDataTier-->TournamentAdministationManager: boolean response
deactivate TournamentDataTier

TournamentAdministationManager->UserService:GET /user/{educatorId}/exists
activate UserService
UserService-->TournamentAdministationManager: boolean response
deactivate UserService

TournamentAdministationManager->TournamentDataTier: addEducator(educatorId, tournamentId)
activate TournamentDataTier
TournamentDataTier-->TournamentAdministationManager: Confirmation
deactivate TournamentDataTier

TournamentAdministationManager-->TournamentManager: Educator Added Confirmation
deactivate TournamentAdministationManager
TournamentManager-->APIGateway: Educator Added Confirmation
deactivate TournamentManager
APIGateway-->Client: HTTP 200 OK
deactivate APIGateway